# Backend/core/signals.py
from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Oferta, Pedido
from .emails import enviar_notificacion_oferta, enviar_confirmacion_pedido, enviar_actualizacion_estado


@receiver(post_save, sender=Oferta)
def notificar_nueva_oferta(sender, instance, created, **kwargs):
    """
    Env√≠a correo autom√°tico cuando se crea una nueva oferta
    """
    if created:
        print(f"üéâ Nueva oferta creada: {instance.titulo}")
        # Enviar notificaci√≥n en segundo plano (considera usar Celery en producci√≥n)
        try:
            enviar_notificacion_oferta(instance.id)
        except Exception as e:
            print(f"‚ùå Error al enviar notificaci√≥n de oferta: {str(e)}")


@receiver(post_save, sender=Pedido)
def notificar_pedido(sender, instance, created, **kwargs):
    """
    Env√≠a correos cuando se crea o actualiza un pedido
    """
    try:
        if created:
            # Nuevo pedido - enviar confirmaci√≥n
            print(f"üì¶ Nuevo pedido creado: #{instance.id}")
            enviar_confirmacion_pedido(instance.id)
        else:
            # Pedido actualizado - verificar si cambi√≥ el estado
            if 'estado' in kwargs.get('update_fields', []) or True:
                print(f"üîÑ Estado del pedido #{instance.id} actualizado a: {instance.estado}")
                enviar_actualizacion_estado(instance.id)
    except Exception as e:
        print(f"‚ùå Error en notificaci√≥n de pedido: {str(e)}")